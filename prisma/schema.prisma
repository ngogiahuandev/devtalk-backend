// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  username  String    @unique
  email     String    @unique
  password  String
  bio       String?
  avatarUrl String?
  role      Role      @default(USER)
  isBanned  Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isDeleted Boolean   @default(false) 

  posts        Post[]
  comments     Comment[]
  likes        Like[]
  bookmarks    Bookmark[]
  readHistory  ReadHistory[]
  notifications Notification[]
}

model Post {
  id          Int             @id @default(autoincrement())
  title       String
  body        String
  isDeleted   Boolean         @default(false) 
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  authorId    Int
  author      User            @relation(fields: [authorId], references: [id])
  comments    Comment[]
  likes       Like[]
  bookmarks   Bookmark[]
  tags        Tag[]           @relation("PostTags")
  images      Image[]
  readHistories ReadHistory[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  isDeleted Boolean  @default(false) 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  postId    Int
  post      Post     @relation(fields: [postId], references: [id])
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id])
}

model Tag {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now())
  isDeleted Boolean   @default(false) 
  posts     Post[]    @relation("PostTags")
}

model Image {
  id        Int      @id @default(autoincrement())
  postId    Int
  imageUrl  String
  isDeleted Boolean  @default(false) 
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id])
}

model Like {
  id        Int      @id @default(autoincrement())
  userId    Int
  postId    Int
  createdAt DateTime @default(now())
  isDeleted Boolean  @default(false) 
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
}

model Bookmark {
  id        Int      @id @default(autoincrement())
  userId    Int
  postId    Int
  createdAt DateTime @default(now())
  isDeleted Boolean  @default(false) 
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
}

model ReadHistory {
  id        Int      @id @default(autoincrement())
  userId    Int
  postId    Int
  readAt    DateTime @default(now())
  isDeleted Boolean  @default(false) 
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  type      String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  isDeleted Boolean  @default(false) 
  user      User     @relation(fields: [userId], references: [id])
}

enum Role {
  USER
  ADMIN
}

